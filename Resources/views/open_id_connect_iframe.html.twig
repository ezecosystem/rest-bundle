{# Checks the session cookie on api domain and share it on all selected domains #}
{% if 'api.wuv.de' not in app.request.host %}
<script>
/*
 *
 * Client Side API
 *
 */
var snDomains = new Array(),
    counter = 0;
{# Get all allowed domains for sharing the session cookie #}
{% if oa_params.oicdomains is defined%}
{% set oicdomains = oa_params.oicdomains|split(',') %}
{% for OpenIDConnectDomain in oicdomains %}
{% if app.request.schemeAndHttpHost != OpenIDConnectDomain %}
snDomains[counter] = '{{OpenIDConnectDomain|trim}}';
counter++;
{% endif %}
{% endfor %}
{% endif %}
{# Get all allowed domains for sharing the session cookie END #}

{# Do the whole stuff for OpenID Connect session #}
if (typeof jsoObj != 'undefined') {
    var localStorageToken = jsoObj.checkToken();
    if (localStorageToken !== null && typeof localStorageToken.access_token != "undefined") {
        // Add iframe with source to OP
        checkSessionIFrame = document.createElement("iframe");
        checkSessionIFrame.setAttribute("src", "{{oa_params.clba}}{{oa_params.endpoint_rest}}/check_session_iframe");
        checkSessionIFrame.setAttribute("id", "receiveOPData");
        checkSessionIFrame.style.width = "0px";
        checkSessionIFrame.style.height = "0px";
        checkSessionIFrame.style.display = "none";
        document.body.appendChild(checkSessionIFrame);

        // Start checking the status on OP
        var targetOP = oauthSettings.baseURL;
        window.onload = function() {
            checkStatus();
            // Check the status every 60 seconds
            setInterval("checkStatus()", 1000*60);
        };

        function checkStatus() {
            var client = oauthSettings.client_id,
                text = client + " " + localStorageToken.access_token,
                receverWindow = document.getElementById('receiveOPData').contentWindow;
            receverWindow.postMessage(text, targetOP);
        };

        // Set session cookie does not work as a template function, because of Varnish cache. It has to be a JS function.
        var xrowOICIsSet = JSON.parse(localStorage.getItem('xrowOIC'));
        if (!xrowOICIsSet && snDomains.length > 0) {
            // Get at first session data
            $.ajax({
                type    : 'GET',
                url     : oauthSettings.apiSessionURL+'?access_token='+localStorageToken.access_token
            }).done(function(sessionRequest, textStatus, jqXHR){
                if (typeof sessionRequest != 'undefined') {
                    if (typeof sessionRequest.result != 'undefined')
                        var sessionData = sessionRequest.result;
                    else if (sessionRequest.responseRetryReturn != 'undefined' && typeof sessionRequest.responseRetryReturn.result != 'undefined')
                        var sessionData = sessionRequest.responseRetryReturn.result;
                    // Set session cookie for allowed domains
                    for (i = 0; i < snDomains.length; i++) {
                        $.ajax({
                            type       : 'POST',
                            xhrFields  : {
                                withCredentials: true
                            },
                            crossDomain: true,
                            url        : snDomains[i]+'{{oa_params.endpoint_rest}}/oicsession',
                            data       : {'idsv': sessionData.session_id}
                        }).done(function(setSessionRequest, textStatus, jqXHR){
                            if (snDomains.length == i) {
                                // Set localStoragItem for xrowOIC
                                localStorage.setItem('xrowOIC', JSON.stringify(snDomains));
                                window.console.log('xrowOIC', snDomains);
                            }
                        }).fail(function(){
                            // Error during set cookie
                        });
                    }
                }
            });
        }
        // Get OP post message
        window.addEventListener('message', function(event){
            //window.console.log('event', event);
            // Source is not the OP. Reject this request.
            if (event.origin !== targetOP) {
                return;
            }
            // User is logged out on API server.
            if (event.data != 'unchanged') {
                window.console.log('User is logged out on API server.');
                $.ajax({
                    type    : 'GET',
                    url     : oauthSettings.apiSessionURL+'?access_token='+localStorageToken.access_token
                }).done(function(sessionRequest, textStatus, jqXHR){
                    if (typeof sessionRequest != 'undefined') {
                        if (typeof sessionRequest.result != 'undefined')
                            var sessionData = sessionRequest.result;
                        else if (sessionRequest.responseRetryReturn != 'undefined' && typeof sessionRequest.responseRetryReturn.result != 'undefined')
                            var sessionData = sessionRequest.responseRetryReturn.result;
                        // Destroy the session cookie on every domains
                        if (snDomains.length > 0) {
                            for (i = 0; i < snDomains.length; i++) {
                                window.console.log('Destroy session on domain '+snDomains[i]);
                                $.ajax({
                                    type    : 'DELETE',
                                    xhrFields  : {
                                        withCredentials: true
                                    },
                                    crossDomain: true,
                                    url     : snDomains[i]+oauthSettings.apiLogoutURL+'/'+sessionData.session_id
                                }).done(function (logoutRequest) {
                                    //window.console.log('logoutRequest', logoutRequest);
                                    if (snDomains.length == i) {
                                        // Destroy also localStoragItem for xrowOIC
                                        localStorage.removeItem('xrowOIC');
                                        restLogout(oauthSettings, jsoObj, null, '', sessionData);
                                    }
                                });
                            }
                        }
                        
                    }
                });
            }
        });
    }
}
</script>
{% endif %}
{# Checks the session cookie on api domain END #}