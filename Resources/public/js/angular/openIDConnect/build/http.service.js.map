{"version":3,"sources":["http.service.ts"],"names":[],"mappings":"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","file":"http.service.js","sourcesContent":["import {Injectable, Inject}                      from \"angular2/core\";\nimport {Http, Response, Headers, RequestOptions} from \"angular2/http\";\nimport {Observable}                              from \"rxjs/Observable\";\nimport 'rxjs/Rx';\n\nimport {JwtService}                              from \"jwt.service\";\nimport {CastResponseToOobject}                   from \"cast.response.to.object\";\n\n@Injectable()\nexport class HttpService {\n\n    _oauthSettings    = oauthSettings;\n    _userUrl          = this._oauthSettings.endpointPrefix+'/user';\n    _accountUrl       = this._oauthSettings.endpointPrefix+'/account';\n    _subscriptionsUrl = this._oauthSettings.endpointPrefix+'/subscriptions';\n    _headerOptions    = new RequestOptions({ headers: new Headers({ 'Content-Type': 'application/x-www-form-urlencoded',\n                                                                            'Accept':       'application/json' }) });\n\n    responseUser;\n    responseAccount;\n    responseSubscriptions;\n\n    errorText;\n    errorStatus;\n\n    constructor (public _http: Http, private _jwtService: JwtService) {}\n\n    /*\n     * Authenticate\n     */\n    authenticate(loginResponseData) {\n        let authRequestData = \"access_token=\"+loginResponseData.access_token;\n        this._http\n            .post(this._oauthSettings.baseURL+this._oauthSettings.openIDConnectURL, authRequestData, this._headerOptions)\n            .subscribe(\n                authResponse => {\n                    this.setDomainCookie(authResponse.json(), loginResponseData);\n                },\n                errorAuthResponse => this.handleError(errorAuthResponse, 'AUTH FEHLER: ')\n            );\n    }\n\n    /*\n     * Set locale cookie for user domain\n     */\n    setDomainCookie(authResponseData, loginResponseData) {\n        let castedAuthResponse = new CastResponseToOobject(authResponseData);\n        this._http\n            .get(this._oauthSettings.setcookieURL+\"?access_token=\"+loginResponseData.access_token+\"&idsv=\"+castedAuthResponse.result.session_id+\"\")\n            .subscribe(\n                setCookieResponse => {\n                    this._jwtService.set(loginResponseData);\n                    window.location.reload();\n                },\n                errorSetCookieResponse => this.handleError(errorSetCookieResponse, 'SETCOOKIE FEHLER: ')\n            );\n    }\n\n    /*\n     * Get user and account data from CRM\n     */\n    getUserData(accessToken) {\n        let accessTokenRequestData = \"?access_token=\"+accessToken;\n\n        return Observable.forkJoin(\n            this._http\n                .get(this._oauthSettings.baseURL+this._userUrl+accessTokenRequestData, this._headerOptions)\n                .map((res:Response) => this.responseUser = res.json()),\n            this._http\n                .get(this._oauthSettings.baseURL+this._accountUrl+accessTokenRequestData, this._headerOptions)\n                .map((res:Response) => this.responseAccount = res.json())\n        );\n    }\n\n    /*\n     * Refresh the access_token with the refresh_token\n     */\n    refreshToken() {\n        let jwToken = this._jwtService.get();\n        if (jwToken !== null && typeof jwToken.refresh_token != \"undefined\") {\n            let refreshTokenRequestData = \"grant_type=refresh_token&client_id=\"+this._oauthSettings.client_id+\"&client_secret=\"+this._oauthSettings.client_secret+\"&refresh_token=\"+jwToken.refresh_token;\n            this._http\n                .post(this._oauthSettings.baseURL+this._oauthSettings.tokenURL, refreshTokenRequestData, this._headerOptions)\n                .subscribe(\n                    refreshTokenResponse => {\n                        this._jwtService.set(refreshTokenResponse.json());\n                        window.location.reload();\n                    },\n                    errorRefreshTokenResponse => this.handleError(errorRefreshTokenResponse, 'refreshToken FEHLER: ')\n                );\n        }\n        else {\n            console.log('refreshToken FEHLER: jwToken oder jwToken.refresh_token ist nicht gesetzt.', jwToken);\n        }\n    }\n\n    /*\n     * Logout the user\n     */\n    logout() {\n        let jwToken = this._jwtService.get();\n        if (jwToken !== null && typeof jwToken.access_token != \"undefined\") {\n            this._http\n                .get(this._oauthSettings.baseURL+this._oauthSettings.apiSessionURL+\"?access_token=\"+jwToken.access_token, this._headerOptions)\n                .subscribe(\n                    sessionResponse => {\n                        if (sessionResponse.status == 200) {\n                            let castedSessionResponse = new CastResponseToOobject(sessionResponse.json());\n                            //console.log('castedSessionResponse', castedSessionResponse);\n                            //return true;\n                            this._http\n                                .delete(this._oauthSettings.baseURL+this._oauthSettings.apiLogoutURL+'/'+castedSessionResponse.session_id, this._headerOptions)\n                                .subscribe(\n                                    logoutResponse => {\n                                        this._jwtService.remove();\n                                        window.location.reload();\n                                    },\n                                    errorLogoutResponse => this.handleError(errorLogoutResponse, 'Logout FEHLER: ')\n                                );\n                        }\n                    },\n                    errorSessionResponse => this.handleError(errorSessionResponse, 'Logout Session FEHLER: ')\n                );\n        }\n        else {\n            console.log('LOGOUT FEHLER: jwToken oder jwToken.access_token ist nicht gesetzt.', jwToken);\n        }\n    }\n\n    public handleError(error: Response, message) {\n        //console.error(message, error.json());\n        throw Error(error.json());\n    }\n}"],"sourceRoot":"/source/"}